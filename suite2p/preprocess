%Inscopix Preprocessing for nVista 3.0 and nVoke 2.0 .isxd files
%requires new data processing software
%Adapted from example API by James Grove, 6/17/19

%Brief explanation:
%1. First, you will be given a mean projection of the video for cropping
%draw a square and double click it when done
%2. This cropped video will then be temporally+spatially downsampled
%3. Then it will spatially bandpass filtered
        % essentially a smoothed frame will be subtracted from a less smoothed frame
        % smoothing is done using 2D Gaussian kernels by default standard deviations
        % this removes out of focus cells/fluorescence (highpass)
        % and smoothes the video (lowpass)
%4. Then you will be given another mean projection to crop for motion corr
        %draw a polygon to envelop the area and double click it when done
%5. This video will then be motion corrected and cropped
%6. Then it will be saved to a .tiff file for cnmfe
%7. Double check files in ImageJ
%Further explanation: https://support.inscopix.com/inscopix-data-processing-121-user-guide-html

close all; clear all;
rec_names={ %list of videos to process and export in .tiff (must NOT include .tiff)
     'CG_VGATF2_coldsteps'
    'CG_VGLUTM1_Coldsteps'
     
     
     
};

sdf=2; %spatial downsample
tdf=4; %temporal downsample
output_dir=cd; %output directory (by default "cd", or current directory)
already_preprocessed=false; %if true, the files should be in .isxd format

%% Start up
addpath('C:\Program Files\Inscopix\Data Processing'); %path to inscopix data processing package

%% Generate the recording file paths.
rec_files = cellfun(@(x) fullfile(fileparts(which([x, '.tiff'])), [x, '.tiff']), rec_names, 'UniformOutput', false);

%% Preprocess the recordings by spatially downsampling and temporally downsampling
if(already_preprocessed)
    pp_files=rec_files
else
    pp_files = isx.make_output_file_paths(rec_files, output_dir, 'pp');
    disp('starting video projection');
    project_files = isx.make_output_file_paths(rec_files, output_dir, 'mean1');
    
    for p=1:length(pp_files) %creates file
        isx.project_movie(rec_files{p},project_files{p}, 'stat_type', 'mean');%creates file
    end%creates file
    
    %if you have mean1, but not PP, run all until here except lines that say "creates
    %file"
    
    
end
disp('starting preprocessing');
for p=1:length(pp_files)%creates file
    isx.preprocess(rec_files{p}, pp_files{p}, 'spatial_downsample_factor', sdf, 'temporal_downsample_factor', tdf);%creates file
end%creates file
%% Spatial bandpass
disp('starting spatial bandpass')
bp_files = isx.make_output_file_paths(pp_files, output_dir, 'BP');

for p=1:length(pp_files)%creates file
    isx.spatial_filter(pp_files{p}, bp_files{p}, 'low_cutoff', 0.005, 'high_cutoff', 0.500);%creates file
end%creates file

%% Export to tiff
disp('exporting to tiff')

for p=1:length(rec_names)
    rec_names{p}=[rec_names{p}, '-pp-BP']
end

rec_files = cellfun(@(x) fullfile(fileparts(which([x, '.isxd'])), [x, '.isxd']), rec_names, 'UniformOutput', false);

for p=1:length(rec_files)%creates file
    output=fullfile(fileparts(which([rec_names{p}])), [rec_names{p}, '.tiff']);%creates file
    isx.export_movie_to_tiff(rec_files{p}, output);%creates file
end%creates file
   

disp('ready for suite2p')
